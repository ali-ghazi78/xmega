
xmega_adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00802000  00000e10  00000ea4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00802026  00802026  00000eca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000efc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003389  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002968  00000000  00000000  00004355  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009df  00000000  00000000  00006cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  0000769c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001fdd  00000000  00000000  00007808  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000577  00000000  00000000  000097e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00009d5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__ctors_end>
   4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
   8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
   c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  10:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  14:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  18:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  1c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  20:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  24:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  28:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  2c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  30:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  34:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  38:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  3c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  40:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  44:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  48:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  4c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  50:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  54:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  58:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  5c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  60:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  64:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_25>
  68:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  6c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  70:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  74:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  78:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  7c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  80:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  84:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  88:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  8c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  90:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  94:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  98:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  9c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  a0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  a4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  a8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  ac:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  b0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  b4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  b8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  bc:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  c0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  c4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  c8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  cc:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  d0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  d4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  d8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  dc:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  e0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  e4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  e8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  ec:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  f0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  f4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  f8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
  fc:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 100:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 104:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 108:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 10c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 110:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 114:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 118:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 11c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 120:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 124:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 128:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 12c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 130:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 134:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 138:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 13c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 140:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 144:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 148:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 14c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 150:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 154:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 158:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 15c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 160:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 164:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 168:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 16c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 170:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 174:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 178:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 17c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 180:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 184:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 188:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 18c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 190:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 194:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 198:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 19c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 1a0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 1a4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 1a8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 1ac:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 1b0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 1b4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 1b8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 1bc:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 1c0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 1c4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 1c8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 1cc:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 1d0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 1d4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 1d8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 1dc:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 1e0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 1e4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 1e8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 1ec:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 1f0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 1f4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 1f8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
 1fc:	07 63       	ori	r16, 0x37	; 55
 1fe:	42 36       	cpi	r20, 0x62	; 98
 200:	b7 9b       	sbis	0x16, 7	; 22
 202:	d8 a7       	std	Y+40, r29	; 0x28
 204:	1a 39       	cpi	r17, 0x9A	; 154
 206:	68 56       	subi	r22, 0x68	; 104
 208:	18 ae       	std	Y+56, r1	; 0x38
 20a:	ba ab       	std	Y+50, r27	; 0x32
 20c:	55 8c       	ldd	r5, Z+29	; 0x1d
 20e:	1d 3c       	cpi	r17, 0xCD	; 205
 210:	b7 cc       	rjmp	.-1682   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
 212:	57 63       	ori	r21, 0x37	; 55
 214:	bd 6d       	ori	r27, 0xDD	; 221
 216:	ed fd       	.word	0xfded	; ????
 218:	75 3e       	cpi	r23, 0xE5	; 229
 21a:	f6 17       	cp	r31, r22
 21c:	72 31       	cpi	r23, 0x12	; 18
 21e:	bf 00       	.word	0x00bf	; ????
 220:	00 00       	nop
 222:	80 3f       	cpi	r24, 0xF0	; 240
 224:	08 00       	.word	0x0008	; ????
 226:	00 00       	nop
 228:	be 92       	st	-X, r11
 22a:	24 49       	sbci	r18, 0x94	; 148
 22c:	12 3e       	cpi	r17, 0xE2	; 226
 22e:	ab aa       	std	Y+51, r10	; 0x33
 230:	aa 2a       	or	r10, r26
 232:	be cd       	rjmp	.-1156   	; 0xfffffdb0 <__eeprom_end+0xff7efdb0>
 234:	cc cc       	rjmp	.-1640   	; 0xfffffbce <__eeprom_end+0xff7efbce>
 236:	4c 3e       	cpi	r20, 0xEC	; 236
 238:	00 00       	nop
 23a:	00 80       	ld	r0, Z
 23c:	be ab       	std	Y+54, r27	; 0x36
 23e:	aa aa       	std	Y+50, r10	; 0x32
 240:	aa 3e       	cpi	r26, 0xEA	; 234
 242:	00 00       	nop
 244:	00 00       	nop
 246:	bf 00       	.word	0x00bf	; ????
 248:	00 00       	nop
 24a:	80 3f       	cpi	r24, 0xF0	; 240
 24c:	00 00       	nop
 24e:	00 00       	nop
 250:	00 08       	sbc	r0, r0
 252:	41 78       	andi	r20, 0x81	; 129
 254:	d3 bb       	out	0x13, r29	; 19
 256:	43 87       	std	Z+11, r20	; 0x0b
 258:	d1 13       	cpse	r29, r17
 25a:	3d 19       	sub	r19, r13
 25c:	0e 3c       	cpi	r16, 0xCE	; 206
 25e:	c3 bd       	out	0x23, r28	; 35
 260:	42 82       	std	Z+2, r4	; 0x02
 262:	ad 2b       	or	r26, r29
 264:	3e 68       	ori	r19, 0x8E	; 142
 266:	ec 82       	std	Y+4, r14	; 0x04
 268:	76 be       	out	0x36, r7	; 54
 26a:	d9 8f       	std	Y+25, r29	; 0x19
 26c:	e1 a9       	ldd	r30, Z+49	; 0x31
 26e:	3e 4c       	sbci	r19, 0xCE	; 206
 270:	80 ef       	ldi	r24, 0xF0	; 240
 272:	ff be       	out	0x3f, r15	; 63
 274:	01 c4       	rjmp	.+2050   	; 0xa78 <pow+0xa0>
 276:	ff 7f       	andi	r31, 0xFF	; 255
 278:	3f 00       	.word	0x003f	; ????
 27a:	00 00       	nop
	...

0000027e <__ctors_end>:
 27e:	11 24       	eor	r1, r1
 280:	1f be       	out	0x3f, r1	; 63
 282:	cf ef       	ldi	r28, 0xFF	; 255
 284:	cd bf       	out	0x3d, r28	; 61
 286:	df e2       	ldi	r29, 0x2F	; 47
 288:	de bf       	out	0x3e, r29	; 62

0000028a <__do_copy_data>:
 28a:	10 e2       	ldi	r17, 0x20	; 32
 28c:	a0 e0       	ldi	r26, 0x00	; 0
 28e:	b0 e2       	ldi	r27, 0x20	; 32
 290:	e0 e1       	ldi	r30, 0x10	; 16
 292:	fe e0       	ldi	r31, 0x0E	; 14
 294:	02 c0       	rjmp	.+4      	; 0x29a <__do_copy_data+0x10>
 296:	05 90       	lpm	r0, Z+
 298:	0d 92       	st	X+, r0
 29a:	a6 32       	cpi	r26, 0x26	; 38
 29c:	b1 07       	cpc	r27, r17
 29e:	d9 f7       	brne	.-10     	; 0x296 <__do_copy_data+0xc>

000002a0 <__do_clear_bss>:
 2a0:	20 e2       	ldi	r18, 0x20	; 32
 2a2:	a6 e2       	ldi	r26, 0x26	; 38
 2a4:	b0 e2       	ldi	r27, 0x20	; 32
 2a6:	01 c0       	rjmp	.+2      	; 0x2aa <.do_clear_bss_start>

000002a8 <.do_clear_bss_loop>:
 2a8:	1d 92       	st	X+, r1

000002aa <.do_clear_bss_start>:
 2aa:	a7 32       	cpi	r26, 0x27	; 39
 2ac:	b2 07       	cpc	r27, r18
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <.do_clear_bss_loop>
 2b0:	0e 94 0c 03 	call	0x618	; 0x618 <main>
 2b4:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <_exit>

000002b8 <__bad_interrupt>:
 2b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002bc <__vector_25>:
		LED_RIGHT_OFF;
	
	if(!(KEY_LEFT))
		LED_LEFT_ON;
	else
		LED_LEFT_OFF;
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	8f 93       	push	r24
 2c8:	ef 93       	push	r30
 2ca:	ff 93       	push	r31
 2cc:	80 e4       	ldi	r24, 0x40	; 64
 2ce:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
 2d2:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
 2d6:	e0 ea       	ldi	r30, 0xA0	; 160
 2d8:	f8 e0       	ldi	r31, 0x08	; 8
 2da:	81 81       	ldd	r24, Z+1	; 0x01
 2dc:	88 23       	and	r24, r24
 2de:	ec f3       	brlt	.-6      	; 0x2da <__vector_25+0x1e>
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <__data_end>
 2e6:	80 e4       	ldi	r24, 0x40	; 64
 2e8:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
 2ec:	ff 91       	pop	r31
 2ee:	ef 91       	pop	r30
 2f0:	8f 91       	pop	r24
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <init_pin>:
 2fc:	e0 e4       	ldi	r30, 0x40	; 64
 2fe:	f6 e0       	ldi	r31, 0x06	; 6
 300:	80 e8       	ldi	r24, 0x80	; 128
 302:	81 83       	std	Z+1, r24	; 0x01
 304:	80 e2       	ldi	r24, 0x20	; 32
 306:	81 83       	std	Z+1, r24	; 0x01
 308:	80 e4       	ldi	r24, 0x40	; 64
 30a:	81 83       	std	Z+1, r24	; 0x01
 30c:	80 e1       	ldi	r24, 0x10	; 16
 30e:	81 83       	std	Z+1, r24	; 0x01
 310:	e0 e6       	ldi	r30, 0x60	; 96
 312:	f6 e0       	ldi	r31, 0x06	; 6
 314:	80 85       	ldd	r24, Z+8	; 0x08
 316:	84 70       	andi	r24, 0x04	; 4
 318:	82 83       	std	Z+2, r24	; 0x02
 31a:	80 85       	ldd	r24, Z+8	; 0x08
 31c:	82 70       	andi	r24, 0x02	; 2
 31e:	82 83       	std	Z+2, r24	; 0x02
 320:	80 85       	ldd	r24, Z+8	; 0x08
 322:	81 70       	andi	r24, 0x01	; 1
 324:	82 83       	std	Z+2, r24	; 0x02
 326:	80 85       	ldd	r24, Z+8	; 0x08
 328:	88 70       	andi	r24, 0x08	; 8
 32a:	82 83       	std	Z+2, r24	; 0x02
 32c:	08 95       	ret

0000032e <test_led>:
 32e:	e0 e4       	ldi	r30, 0x40	; 64
 330:	f6 e0       	ldi	r31, 0x06	; 6
 332:	80 e4       	ldi	r24, 0x40	; 64
 334:	87 83       	std	Z+7, r24	; 0x07
 336:	2f e7       	ldi	r18, 0x7F	; 127
 338:	38 e3       	ldi	r19, 0x38	; 56
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	30 40       	sbci	r19, 0x00	; 0
 340:	40 40       	sbci	r20, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <test_led+0xe>
 344:	00 c0       	rjmp	.+0      	; 0x346 <test_led+0x18>
 346:	00 00       	nop
 348:	20 e8       	ldi	r18, 0x80	; 128
 34a:	27 83       	std	Z+7, r18	; 0x07
 34c:	5f e7       	ldi	r21, 0x7F	; 127
 34e:	68 e3       	ldi	r22, 0x38	; 56
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	51 50       	subi	r21, 0x01	; 1
 354:	60 40       	sbci	r22, 0x00	; 0
 356:	90 40       	sbci	r25, 0x00	; 0
 358:	e1 f7       	brne	.-8      	; 0x352 <test_led+0x24>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <test_led+0x2e>
 35c:	00 00       	nop
 35e:	90 e1       	ldi	r25, 0x10	; 16
 360:	97 83       	std	Z+7, r25	; 0x07
 362:	af e7       	ldi	r26, 0x7F	; 127
 364:	b8 e3       	ldi	r27, 0x38	; 56
 366:	31 e0       	ldi	r19, 0x01	; 1
 368:	a1 50       	subi	r26, 0x01	; 1
 36a:	b0 40       	sbci	r27, 0x00	; 0
 36c:	30 40       	sbci	r19, 0x00	; 0
 36e:	e1 f7       	brne	.-8      	; 0x368 <test_led+0x3a>
 370:	00 c0       	rjmp	.+0      	; 0x372 <test_led+0x44>
 372:	00 00       	nop
 374:	30 e2       	ldi	r19, 0x20	; 32
 376:	37 83       	std	Z+7, r19	; 0x07
 378:	4f e7       	ldi	r20, 0x7F	; 127
 37a:	58 e3       	ldi	r21, 0x38	; 56
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	41 50       	subi	r20, 0x01	; 1
 380:	50 40       	sbci	r21, 0x00	; 0
 382:	60 40       	sbci	r22, 0x00	; 0
 384:	e1 f7       	brne	.-8      	; 0x37e <test_led+0x50>
 386:	00 c0       	rjmp	.+0      	; 0x388 <test_led+0x5a>
 388:	00 00       	nop
 38a:	36 83       	std	Z+6, r19	; 0x06
 38c:	26 83       	std	Z+6, r18	; 0x06
 38e:	96 83       	std	Z+6, r25	; 0x06
 390:	86 83       	std	Z+6, r24	; 0x06
 392:	af e4       	ldi	r26, 0x4F	; 79
 394:	b3 ec       	ldi	r27, 0xC3	; 195
 396:	11 97       	sbiw	r26, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <test_led+0x68>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <test_led+0x6e>
 39c:	00 00       	nop
 39e:	25 83       	std	Z+5, r18	; 0x05
 3a0:	85 83       	std	Z+5, r24	; 0x05
 3a2:	35 83       	std	Z+5, r19	; 0x05
 3a4:	95 83       	std	Z+5, r25	; 0x05
 3a6:	af e4       	ldi	r26, 0x4F	; 79
 3a8:	b3 ec       	ldi	r27, 0xC3	; 195
 3aa:	11 97       	sbiw	r26, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <test_led+0x7c>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <test_led+0x82>
 3b0:	00 00       	nop
 3b2:	36 83       	std	Z+6, r19	; 0x06
 3b4:	26 83       	std	Z+6, r18	; 0x06
 3b6:	96 83       	std	Z+6, r25	; 0x06
 3b8:	86 83       	std	Z+6, r24	; 0x06
 3ba:	af e4       	ldi	r26, 0x4F	; 79
 3bc:	b3 ec       	ldi	r27, 0xC3	; 195
 3be:	11 97       	sbiw	r26, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <test_led+0x90>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <test_led+0x96>
 3c4:	00 00       	nop
 3c6:	25 83       	std	Z+5, r18	; 0x05
 3c8:	85 83       	std	Z+5, r24	; 0x05
 3ca:	35 83       	std	Z+5, r19	; 0x05
 3cc:	95 83       	std	Z+5, r25	; 0x05
 3ce:	af e4       	ldi	r26, 0x4F	; 79
 3d0:	b3 ec       	ldi	r27, 0xC3	; 195
 3d2:	11 97       	sbiw	r26, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <test_led+0xa4>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <test_led+0xaa>
 3d8:	00 00       	nop
 3da:	36 83       	std	Z+6, r19	; 0x06
 3dc:	26 83       	std	Z+6, r18	; 0x06
 3de:	96 83       	std	Z+6, r25	; 0x06
 3e0:	86 83       	std	Z+6, r24	; 0x06
 3e2:	8f e4       	ldi	r24, 0x4F	; 79
 3e4:	93 ec       	ldi	r25, 0xC3	; 195
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <test_led+0xb8>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <test_led+0xbe>
 3ec:	00 00       	nop
 3ee:	08 95       	ret

000003f0 <adc_init>:
}
void adc_init()
{
	ADCA_CTRLB |= ADC_CURRLIMIT1_bm|ADC_CONMODE_bm; //, maximum sampling speed 1msps, resolution 12-bit right adjusted, signed mode
 3f0:	e1 e0       	ldi	r30, 0x01	; 1
 3f2:	f2 e0       	ldi	r31, 0x02	; 2
 3f4:	80 81       	ld	r24, Z
 3f6:	80 65       	ori	r24, 0x50	; 80
 3f8:	80 83       	st	Z, r24
	ADCA_REFCTRL |= ADC_REFSEL0_bm; //INTVCC2 i.e. Vcc/1.6 is selected as reference voltage
 3fa:	e2 e0       	ldi	r30, 0x02	; 2
 3fc:	f2 e0       	ldi	r31, 0x02	; 2
 3fe:	80 81       	ld	r24, Z
 400:	80 61       	ori	r24, 0x10	; 16
 402:	80 83       	st	Z, r24
	ADCA_EVCTRL = 0x00; //no event channel input is selected
 404:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
	ADCA_PRESCALER |= ADC_PRESCALER2_bm; //prescaler 64 is selected and peripheral clock is 8MHz
 408:	e4 e0       	ldi	r30, 0x04	; 4
 40a:	f2 e0       	ldi	r31, 0x02	; 2
 40c:	80 81       	ld	r24, Z
 40e:	84 60       	ori	r24, 0x04	; 4
 410:	80 83       	st	Z, r24
	ADCA_INTFLAGS = ADC_CH0IF_bm; //clear interrupt flag by writing one to it
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <__TEXT_REGION_LENGTH__+0x700206>
	ADCA_CH0_CTRL |= ADC_CH_INPUTMODE0_bm; //signed mode, single ended positive input selected
 418:	e0 e2       	ldi	r30, 0x20	; 32
 41a:	f2 e0       	ldi	r31, 0x02	; 2
 41c:	80 81       	ld	r24, Z
 41e:	81 60       	ori	r24, 0x01	; 1
 420:	80 83       	st	Z, r24
	ADCA_CTRLA=ADC_ENABLE_bm; //enable ADC
 422:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
 426:	08 95       	ret

00000428 <read_adc>:
}
unsigned int read_adc(unsigned char adc_pin)
{
	unsigned int adc_val;
	
	ADCA_CH0_MUXCTRL |= (adc_pin%11)<<3; //select PIN1 as input for ADC
 428:	e1 e2       	ldi	r30, 0x21	; 33
 42a:	f2 e0       	ldi	r31, 0x02	; 2
 42c:	30 81       	ld	r19, Z
 42e:	95 e7       	ldi	r25, 0x75	; 117
 430:	89 9f       	mul	r24, r25
 432:	21 2d       	mov	r18, r1
 434:	11 24       	eor	r1, r1
 436:	98 2f       	mov	r25, r24
 438:	92 1b       	sub	r25, r18
 43a:	96 95       	lsr	r25
 43c:	92 0f       	add	r25, r18
 43e:	96 95       	lsr	r25
 440:	96 95       	lsr	r25
 442:	96 95       	lsr	r25
 444:	49 2f       	mov	r20, r25
 446:	44 0f       	add	r20, r20
 448:	24 2f       	mov	r18, r20
 44a:	22 0f       	add	r18, r18
 44c:	22 0f       	add	r18, r18
 44e:	24 0f       	add	r18, r20
 450:	92 0f       	add	r25, r18
 452:	89 1b       	sub	r24, r25
 454:	88 0f       	add	r24, r24
 456:	88 0f       	add	r24, r24
 458:	88 0f       	add	r24, r24
 45a:	83 2b       	or	r24, r19
 45c:	80 83       	st	Z, r24
	ADCA_CTRLA|=ADC_CH0START_bm;			//start adc
 45e:	e0 e0       	ldi	r30, 0x00	; 0
 460:	f2 e0       	ldi	r31, 0x02	; 2
 462:	80 81       	ld	r24, Z
 464:	84 60       	ori	r24, 0x04	; 4
 466:	80 83       	st	Z, r24
	
	while(!(ADCA_INTFLAGS & ADC_CH0IF_bm));
 468:	e6 e0       	ldi	r30, 0x06	; 6
 46a:	f2 e0       	ldi	r31, 0x02	; 2
 46c:	80 81       	ld	r24, Z
 46e:	80 ff       	sbrs	r24, 0
 470:	fd cf       	rjmp	.-6      	; 0x46c <read_adc+0x44>
	
	ADCA_INTFLAGS=ADC_CH0IF_bm;  //clear flag
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__TEXT_REGION_LENGTH__+0x700206>
	
	adc_val=ADCA_CH0RESL+ADCA_CH0RESH*256;
 478:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
 47c:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>
	return adc_val;
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	98 2f       	mov	r25, r24
 484:	88 27       	eor	r24, r24
	
}
 486:	82 0f       	add	r24, r18
 488:	91 1d       	adc	r25, r1
 48a:	08 95       	ret

0000048c <init_clock>:

void init_clock(void)//SET 32MHZ
{
    CCP = CCP_IOREG_gc;             // disable register security for oscillator update
 48c:	88 ed       	ldi	r24, 0xD8	; 216
 48e:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL|=1<<1;					//enable 32MHZ ."|" MIKONIM CHON 2MHZ HAM HAST
 490:	e0 e5       	ldi	r30, 0x50	; 80
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	82 60       	ori	r24, 0x02	; 2
 498:	80 83       	st	Z, r24
	while(!(OSC.STATUS&(1<<1)));	//wait for stablize
 49a:	81 81       	ldd	r24, Z+1	; 0x01
 49c:	81 ff       	sbrs	r24, 1
 49e:	fd cf       	rjmp	.-6      	; 0x49a <init_clock+0xe>
    CCP = CCP_IOREG_gc;             // disable register security for oscillator update
 4a0:	88 ed       	ldi	r24, 0xD8	; 216
 4a2:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL=1;						//SELECT 32MHZ
 4a4:	e0 e4       	ldi	r30, 0x40	; 64
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	91 e0       	ldi	r25, 0x01	; 1
 4aa:	90 83       	st	Z, r25
	CCP = CCP_IOREG_gc;             // disable register security for oscillator update
 4ac:	84 bf       	out	0x34, r24	; 52
	CLK.PSCTRL=CLK_PSBCDIV_4_1_gc;	//DIV FOR PERIPHERAL 4
 4ae:	82 e0       	ldi	r24, 0x02	; 2
 4b0:	81 83       	std	Z+1, r24	; 0x01
 4b2:	08 95       	ret

000004b4 <init_usart>:
	//YADET NARE CCP .KOLN CCP BAYAD BEZARI QABL AZ HAE KODOM TA BEHET EJEZA DASTRESI VA NEVESHTN BEDE VASE STATUE LAZEM NIS
}
void init_usart()
{
	PORTC.DIRSET=PIN3_bm;							//DON'T FORGET TO DO THIS OTHERWISE IT WON'T WORK
 4b4:	a0 e4       	ldi	r26, 0x40	; 64
 4b6:	b6 e0       	ldi	r27, 0x06	; 6
 4b8:	88 e0       	ldi	r24, 0x08	; 8
 4ba:	11 96       	adiw	r26, 0x01	; 1
 4bc:	8c 93       	st	X, r24
 4be:	11 97       	sbiw	r26, 0x01	; 1
	PORTC.OUTSET=PIN3_bm;
 4c0:	15 96       	adiw	r26, 0x05	; 5
 4c2:	8c 93       	st	X, r24
 4c4:	15 97       	sbiw	r26, 0x05	; 5
	USARTC0.CTRLC=((1<<1)|(1));						//8 BIT NO PARITY 1 STOP BIT
 4c6:	e0 ea       	ldi	r30, 0xA0	; 160
 4c8:	f8 e0       	ldi	r31, 0x08	; 8
 4ca:	83 e0       	ldi	r24, 0x03	; 3
 4cc:	85 83       	std	Z+5, r24	; 0x05
	USARTC0.BAUDCTRLA=428%256;						//BAUD RATE CONTROLL 115200  BSELL
 4ce:	8c ea       	ldi	r24, 0xAC	; 172
 4d0:	86 83       	std	Z+6, r24	; 0x06
	USARTC0.BAUDCTRLB=((-7)<<4)|((int)(428/256));	//BAUD RATE CONTROLL 115200 -3=0B1101
 4d2:	81 e9       	ldi	r24, 0x91	; 145
 4d4:	87 83       	std	Z+7, r24	; 0x07
	USARTC0.CTRLB=USART_TXEN_bm|USART_RXEN_bm;		//ENABLE TX AND RX AT FIRST ALL IS WHEN U FULL THE DATA BUFFER
 4d6:	88 e1       	ldi	r24, 0x18	; 24
 4d8:	84 83       	std	Z+4, r24	; 0x04
	PORTC.DIRCLR=PIN2_bm;							//MAKE RX INPUT
 4da:	84 e0       	ldi	r24, 0x04	; 4
 4dc:	12 96       	adiw	r26, 0x02	; 2
 4de:	8c 93       	st	X, r24
 4e0:	08 95       	ret

000004e2 <init_usart_interupt>:
}
void init_usart_interupt(void)
{
	init_usart();
 4e2:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <init_usart>
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm; //programmable mask interupt control enable all level of interupt
 4e6:	87 e0       	ldi	r24, 0x07	; 7
 4e8:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	
	SREG=1<<7;////==sei() enable global interupt
 4ec:	80 e8       	ldi	r24, 0x80	; 128
 4ee:	8f bf       	out	0x3f, r24	; 63
	USARTC0.CTRLA=0b00110000;								//enable rx interupt with high peroirity
 4f0:	80 e3       	ldi	r24, 0x30	; 48
 4f2:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
 4f6:	08 95       	ret

000004f8 <my_putchar>:
	 my_putchar(temp%10+'0');
	 
}
void my_putchar(unsigned char input_char)
{
	while(!(USARTC0.STATUS&USART_DREIF_bm));		//HASE PREVOIUSE DATA SENT? data regisert is empty 1 yes 0 is full
 4f8:	e0 ea       	ldi	r30, 0xA0	; 160
 4fa:	f8 e0       	ldi	r31, 0x08	; 8
 4fc:	91 81       	ldd	r25, Z+1	; 0x01
 4fe:	95 ff       	sbrs	r25, 5
 500:	fd cf       	rjmp	.-6      	; 0x4fc <my_putchar+0x4>
	USARTC0.DATA=input_char;						//LOAD DATA INTO REG
 502:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	while(!(USARTC0.STATUS&USART_DREIF_bm));		//HASE PREVOIUSE DATA SENT? data regisert is empty 1 yes 0 is full
 506:	e0 ea       	ldi	r30, 0xA0	; 160
 508:	f8 e0       	ldi	r31, 0x08	; 8
 50a:	81 81       	ldd	r24, Z+1	; 0x01
 50c:	85 ff       	sbrs	r24, 5
 50e:	fd cf       	rjmp	.-6      	; 0x50a <my_putchar+0x12>
}
 510:	08 95       	ret

00000512 <my_put_int>:
		my_putchar('\n');
	}
	my_putstr("----------asci table----------");
}
void my_put_int(int number)
{
 512:	af 92       	push	r10
 514:	bf 92       	push	r11
 516:	cf 92       	push	r12
 518:	df 92       	push	r13
 51a:	ef 92       	push	r14
 51c:	ff 92       	push	r15
 51e:	0f 93       	push	r16
 520:	1f 93       	push	r17
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	5c 01       	movw	r10, r24
	 int counter=0;
	 if(number<0)
 528:	99 23       	and	r25, r25
 52a:	34 f4       	brge	.+12     	; 0x538 <my_put_int+0x26>
	 {
		my_putchar('-');
 52c:	8d e2       	ldi	r24, 0x2D	; 45
 52e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <my_putchar>
		number*=-1;
 532:	b1 94       	neg	r11
 534:	a1 94       	neg	r10
 536:	b1 08       	sbc	r11, r1
	 }
	 int temp=number;
	 while (temp)
 538:	a1 14       	cp	r10, r1
 53a:	b1 04       	cpc	r11, r1
 53c:	09 f4       	brne	.+2      	; 0x540 <my_put_int+0x2e>
 53e:	4a c0       	rjmp	.+148    	; 0x5d4 <my_put_int+0xc2>
 540:	c5 01       	movw	r24, r10
 542:	c0 e0       	ldi	r28, 0x00	; 0
 544:	d0 e0       	ldi	r29, 0x00	; 0
	 {
		 counter++;
		 temp/=10;
 546:	2a e0       	ldi	r18, 0x0A	; 10
 548:	30 e0       	ldi	r19, 0x00	; 0
		number*=-1;
	 }
	 int temp=number;
	 while (temp)
	 {
		 counter++;
 54a:	21 96       	adiw	r28, 0x01	; 1
		 temp/=10;
 54c:	b9 01       	movw	r22, r18
 54e:	0e 94 de 06 	call	0xdbc	; 0xdbc <__divmodhi4>
 552:	cb 01       	movw	r24, r22
	 {
		my_putchar('-');
		number*=-1;
	 }
	 int temp=number;
	 while (temp)
 554:	00 97       	sbiw	r24, 0x00	; 0
 556:	c9 f7       	brne	.-14     	; 0x54a <my_put_int+0x38>
	 {
		 counter++;
		 temp/=10;
	 }
	 temp=number;
	 while(counter&&counter!=1)
 558:	c2 30       	cpi	r28, 0x02	; 2
 55a:	d1 05       	cpc	r29, r1
 55c:	d8 f1       	brcs	.+118    	; 0x5d4 <my_put_int+0xc2>
 55e:	85 01       	movw	r16, r10
	 {
		my_putchar(number/pow(10,counter-1)+'0');
 560:	21 97       	sbiw	r28, 0x01	; 1
 562:	be 01       	movw	r22, r28
 564:	0d 2e       	mov	r0, r29
 566:	00 0c       	add	r0, r0
 568:	88 0b       	sbc	r24, r24
 56a:	99 0b       	sbc	r25, r25
 56c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__floatsisf>
 570:	9b 01       	movw	r18, r22
 572:	ac 01       	movw	r20, r24
 574:	60 e0       	ldi	r22, 0x00	; 0
 576:	70 e0       	ldi	r23, 0x00	; 0
 578:	80 e2       	ldi	r24, 0x20	; 32
 57a:	91 e4       	ldi	r25, 0x41	; 65
 57c:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <pow>
 580:	6b 01       	movw	r12, r22
 582:	7c 01       	movw	r14, r24
 584:	b8 01       	movw	r22, r16
 586:	01 2e       	mov	r0, r17
 588:	00 0c       	add	r0, r0
 58a:	88 0b       	sbc	r24, r24
 58c:	99 0b       	sbc	r25, r25
 58e:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__floatsisf>
 592:	a7 01       	movw	r20, r14
 594:	96 01       	movw	r18, r12
 596:	0e 94 b6 03 	call	0x76c	; 0x76c <__divsf3>
 59a:	20 e0       	ldi	r18, 0x00	; 0
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	40 e4       	ldi	r20, 0x40	; 64
 5a0:	52 e4       	ldi	r21, 0x42	; 66
 5a2:	0e 94 4a 03 	call	0x694	; 0x694 <__addsf3>
 5a6:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixunssfsi>
 5aa:	86 2f       	mov	r24, r22
 5ac:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <my_putchar>
 5b0:	ce 01       	movw	r24, r28
 5b2:	01 96       	adiw	r24, 0x01	; 1
		if(counter>2)
 5b4:	03 97       	sbiw	r24, 0x03	; 3
 5b6:	74 f0       	brlt	.+28     	; 0x5d4 <my_put_int+0xc2>
			number%=(int)pow(10,counter-1);
 5b8:	c7 01       	movw	r24, r14
 5ba:	b6 01       	movw	r22, r12
 5bc:	0e 94 28 04 	call	0x850	; 0x850 <__fixsfsi>
 5c0:	ab 01       	movw	r20, r22
 5c2:	bc 01       	movw	r22, r24
 5c4:	c8 01       	movw	r24, r16
 5c6:	ba 01       	movw	r22, r20
 5c8:	0e 94 de 06 	call	0xdbc	; 0xdbc <__divmodhi4>
 5cc:	8c 01       	movw	r16, r24
	 {
		 counter++;
		 temp/=10;
	 }
	 temp=number;
	 while(counter&&counter!=1)
 5ce:	c1 30       	cpi	r28, 0x01	; 1
 5d0:	d1 05       	cpc	r29, r1
 5d2:	31 f6       	brne	.-116    	; 0x560 <my_put_int+0x4e>
			number%=(int)pow(10,counter-1);
		else
			break;
		counter--;
	 } 
	 my_putchar(temp%10+'0');
 5d4:	c5 01       	movw	r24, r10
 5d6:	6a e0       	ldi	r22, 0x0A	; 10
 5d8:	70 e0       	ldi	r23, 0x00	; 0
 5da:	0e 94 de 06 	call	0xdbc	; 0xdbc <__divmodhi4>
 5de:	80 5d       	subi	r24, 0xD0	; 208
 5e0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <my_putchar>
	 
}
 5e4:	df 91       	pop	r29
 5e6:	cf 91       	pop	r28
 5e8:	1f 91       	pop	r17
 5ea:	0f 91       	pop	r16
 5ec:	ff 90       	pop	r15
 5ee:	ef 90       	pop	r14
 5f0:	df 90       	pop	r13
 5f2:	cf 90       	pop	r12
 5f4:	bf 90       	pop	r11
 5f6:	af 90       	pop	r10
 5f8:	08 95       	ret

000005fa <my_putstr>:
	while(!(USARTC0.STATUS&USART_DREIF_bm));		//HASE PREVOIUSE DATA SENT? data regisert is empty 1 yes 0 is full
	USARTC0.DATA=input_char;						//LOAD DATA INTO REG
	while(!(USARTC0.STATUS&USART_DREIF_bm));		//HASE PREVOIUSE DATA SENT? data regisert is empty 1 yes 0 is full
}
void my_putstr(char *p)
{
 5fa:	cf 93       	push	r28
 5fc:	df 93       	push	r29
 5fe:	ec 01       	movw	r28, r24
	for(int i=0;p[i]!='\0';i++)
 600:	88 81       	ld	r24, Y
 602:	88 23       	and	r24, r24
 604:	31 f0       	breq	.+12     	; 0x612 <my_putstr+0x18>
 606:	21 96       	adiw	r28, 0x01	; 1
	{
		my_putchar(p[i]);
 608:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <my_putchar>
	USARTC0.DATA=input_char;						//LOAD DATA INTO REG
	while(!(USARTC0.STATUS&USART_DREIF_bm));		//HASE PREVOIUSE DATA SENT? data regisert is empty 1 yes 0 is full
}
void my_putstr(char *p)
{
	for(int i=0;p[i]!='\0';i++)
 60c:	89 91       	ld	r24, Y+
 60e:	81 11       	cpse	r24, r1
 610:	fb cf       	rjmp	.-10     	; 0x608 <my_putstr+0xe>
	{
		my_putchar(p[i]);
	}
}
 612:	df 91       	pop	r29
 614:	cf 91       	pop	r28
 616:	08 95       	ret

00000618 <main>:
	LED_UP_OFF;
}

int main(void)
{
	init_usart_interupt();
 618:	0e 94 71 02 	call	0x4e2	; 0x4e2 <init_usart_interupt>
	init_pin();
 61c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <init_pin>
	init_clock();
 620:	0e 94 46 02 	call	0x48c	; 0x48c <init_clock>
	test_led();
 624:	0e 94 97 01 	call	0x32e	; 0x32e <test_led>
	adc_init();
 628:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <adc_init>
	my_putchar('\n');	
 62c:	8a e0       	ldi	r24, 0x0A	; 10
 62e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <my_putchar>
	my_putstr("----------");
 632:	8a e1       	ldi	r24, 0x1A	; 26
 634:	90 e2       	ldi	r25, 0x20	; 32
 636:	0e 94 fd 02 	call	0x5fa	; 0x5fa <my_putstr>
	my_putstr("starT");
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	90 e2       	ldi	r25, 0x20	; 32
 63e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <my_putstr>
	my_putstr("----------");
 642:	8a e1       	ldi	r24, 0x1A	; 26
 644:	90 e2       	ldi	r25, 0x20	; 32
 646:	0e 94 fd 02 	call	0x5fa	; 0x5fa <my_putstr>
	my_putchar('\n');
 64a:	8a e0       	ldi	r24, 0x0A	; 10
 64c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <my_putchar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 650:	2f ef       	ldi	r18, 0xFF	; 255
 652:	84 e3       	ldi	r24, 0x34	; 52
 654:	9c e0       	ldi	r25, 0x0C	; 12
 656:	21 50       	subi	r18, 0x01	; 1
 658:	80 40       	sbci	r24, 0x00	; 0
 65a:	90 40       	sbci	r25, 0x00	; 0
 65c:	e1 f7       	brne	.-8      	; 0x656 <main+0x3e>
 65e:	00 c0       	rjmp	.+0      	; 0x660 <main+0x48>
 660:	00 00       	nop
	_delay_ms(500);
	
	
	while (1) 
    {
		LED_UP_ON;
 662:	c0 e4       	ldi	r28, 0x40	; 64
 664:	d6 e0       	ldi	r29, 0x06	; 6
 666:	10 e4       	ldi	r17, 0x40	; 64
 668:	01 2f       	mov	r16, r17
 66a:	0d 83       	std	Y+5, r16	; 0x05
		my_put_int(read_adc(0));
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	0e 94 14 02 	call	0x428	; 0x428 <read_adc>
 672:	0e 94 89 02 	call	0x512	; 0x512 <my_put_int>
		my_putchar('\n');
 676:	8a e0       	ldi	r24, 0x0A	; 10
 678:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <my_putchar>
		LED_UP_OFF;
 67c:	1e 83       	std	Y+6, r17	; 0x06
 67e:	2f ef       	ldi	r18, 0xFF	; 255
 680:	80 e7       	ldi	r24, 0x70	; 112
 682:	92 e0       	ldi	r25, 0x02	; 2
 684:	21 50       	subi	r18, 0x01	; 1
 686:	80 40       	sbci	r24, 0x00	; 0
 688:	90 40       	sbci	r25, 0x00	; 0
 68a:	e1 f7       	brne	.-8      	; 0x684 <main+0x6c>
 68c:	00 c0       	rjmp	.+0      	; 0x68e <main+0x76>
 68e:	00 00       	nop
 690:	ec cf       	rjmp	.-40     	; 0x66a <main+0x52>

00000692 <__subsf3>:
 692:	50 58       	subi	r21, 0x80	; 128

00000694 <__addsf3>:
 694:	bb 27       	eor	r27, r27
 696:	aa 27       	eor	r26, r26
 698:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__addsf3x>
 69c:	0c 94 b2 04 	jmp	0x964	; 0x964 <__fp_round>
 6a0:	0e 94 a4 04 	call	0x948	; 0x948 <__fp_pscA>
 6a4:	38 f0       	brcs	.+14     	; 0x6b4 <__addsf3+0x20>
 6a6:	0e 94 ab 04 	call	0x956	; 0x956 <__fp_pscB>
 6aa:	20 f0       	brcs	.+8      	; 0x6b4 <__addsf3+0x20>
 6ac:	39 f4       	brne	.+14     	; 0x6bc <__addsf3+0x28>
 6ae:	9f 3f       	cpi	r25, 0xFF	; 255
 6b0:	19 f4       	brne	.+6      	; 0x6b8 <__addsf3+0x24>
 6b2:	26 f4       	brtc	.+8      	; 0x6bc <__addsf3+0x28>
 6b4:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_nan>
 6b8:	0e f4       	brtc	.+2      	; 0x6bc <__addsf3+0x28>
 6ba:	e0 95       	com	r30
 6bc:	e7 fb       	bst	r30, 7
 6be:	0c 94 9b 04 	jmp	0x936	; 0x936 <__fp_inf>

000006c2 <__addsf3x>:
 6c2:	e9 2f       	mov	r30, r25
 6c4:	0e 94 c3 04 	call	0x986	; 0x986 <__fp_split3>
 6c8:	58 f3       	brcs	.-42     	; 0x6a0 <__addsf3+0xc>
 6ca:	ba 17       	cp	r27, r26
 6cc:	62 07       	cpc	r22, r18
 6ce:	73 07       	cpc	r23, r19
 6d0:	84 07       	cpc	r24, r20
 6d2:	95 07       	cpc	r25, r21
 6d4:	20 f0       	brcs	.+8      	; 0x6de <__addsf3x+0x1c>
 6d6:	79 f4       	brne	.+30     	; 0x6f6 <__addsf3x+0x34>
 6d8:	a6 f5       	brtc	.+104    	; 0x742 <__addsf3x+0x80>
 6da:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__fp_zero>
 6de:	0e f4       	brtc	.+2      	; 0x6e2 <__addsf3x+0x20>
 6e0:	e0 95       	com	r30
 6e2:	0b 2e       	mov	r0, r27
 6e4:	ba 2f       	mov	r27, r26
 6e6:	a0 2d       	mov	r26, r0
 6e8:	0b 01       	movw	r0, r22
 6ea:	b9 01       	movw	r22, r18
 6ec:	90 01       	movw	r18, r0
 6ee:	0c 01       	movw	r0, r24
 6f0:	ca 01       	movw	r24, r20
 6f2:	a0 01       	movw	r20, r0
 6f4:	11 24       	eor	r1, r1
 6f6:	ff 27       	eor	r31, r31
 6f8:	59 1b       	sub	r21, r25
 6fa:	99 f0       	breq	.+38     	; 0x722 <__addsf3x+0x60>
 6fc:	59 3f       	cpi	r21, 0xF9	; 249
 6fe:	50 f4       	brcc	.+20     	; 0x714 <__addsf3x+0x52>
 700:	50 3e       	cpi	r21, 0xE0	; 224
 702:	68 f1       	brcs	.+90     	; 0x75e <__addsf3x+0x9c>
 704:	1a 16       	cp	r1, r26
 706:	f0 40       	sbci	r31, 0x00	; 0
 708:	a2 2f       	mov	r26, r18
 70a:	23 2f       	mov	r18, r19
 70c:	34 2f       	mov	r19, r20
 70e:	44 27       	eor	r20, r20
 710:	58 5f       	subi	r21, 0xF8	; 248
 712:	f3 cf       	rjmp	.-26     	; 0x6fa <__addsf3x+0x38>
 714:	46 95       	lsr	r20
 716:	37 95       	ror	r19
 718:	27 95       	ror	r18
 71a:	a7 95       	ror	r26
 71c:	f0 40       	sbci	r31, 0x00	; 0
 71e:	53 95       	inc	r21
 720:	c9 f7       	brne	.-14     	; 0x714 <__addsf3x+0x52>
 722:	7e f4       	brtc	.+30     	; 0x742 <__addsf3x+0x80>
 724:	1f 16       	cp	r1, r31
 726:	ba 0b       	sbc	r27, r26
 728:	62 0b       	sbc	r22, r18
 72a:	73 0b       	sbc	r23, r19
 72c:	84 0b       	sbc	r24, r20
 72e:	ba f0       	brmi	.+46     	; 0x75e <__addsf3x+0x9c>
 730:	91 50       	subi	r25, 0x01	; 1
 732:	a1 f0       	breq	.+40     	; 0x75c <__addsf3x+0x9a>
 734:	ff 0f       	add	r31, r31
 736:	bb 1f       	adc	r27, r27
 738:	66 1f       	adc	r22, r22
 73a:	77 1f       	adc	r23, r23
 73c:	88 1f       	adc	r24, r24
 73e:	c2 f7       	brpl	.-16     	; 0x730 <__addsf3x+0x6e>
 740:	0e c0       	rjmp	.+28     	; 0x75e <__addsf3x+0x9c>
 742:	ba 0f       	add	r27, r26
 744:	62 1f       	adc	r22, r18
 746:	73 1f       	adc	r23, r19
 748:	84 1f       	adc	r24, r20
 74a:	48 f4       	brcc	.+18     	; 0x75e <__addsf3x+0x9c>
 74c:	87 95       	ror	r24
 74e:	77 95       	ror	r23
 750:	67 95       	ror	r22
 752:	b7 95       	ror	r27
 754:	f7 95       	ror	r31
 756:	9e 3f       	cpi	r25, 0xFE	; 254
 758:	08 f0       	brcs	.+2      	; 0x75c <__addsf3x+0x9a>
 75a:	b0 cf       	rjmp	.-160    	; 0x6bc <__addsf3+0x28>
 75c:	93 95       	inc	r25
 75e:	88 0f       	add	r24, r24
 760:	08 f0       	brcs	.+2      	; 0x764 <__addsf3x+0xa2>
 762:	99 27       	eor	r25, r25
 764:	ee 0f       	add	r30, r30
 766:	97 95       	ror	r25
 768:	87 95       	ror	r24
 76a:	08 95       	ret

0000076c <__divsf3>:
 76c:	0e 94 ca 03 	call	0x794	; 0x794 <__divsf3x>
 770:	0c 94 b2 04 	jmp	0x964	; 0x964 <__fp_round>
 774:	0e 94 ab 04 	call	0x956	; 0x956 <__fp_pscB>
 778:	58 f0       	brcs	.+22     	; 0x790 <__divsf3+0x24>
 77a:	0e 94 a4 04 	call	0x948	; 0x948 <__fp_pscA>
 77e:	40 f0       	brcs	.+16     	; 0x790 <__divsf3+0x24>
 780:	29 f4       	brne	.+10     	; 0x78c <__divsf3+0x20>
 782:	5f 3f       	cpi	r21, 0xFF	; 255
 784:	29 f0       	breq	.+10     	; 0x790 <__divsf3+0x24>
 786:	0c 94 9b 04 	jmp	0x936	; 0x936 <__fp_inf>
 78a:	51 11       	cpse	r21, r1
 78c:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_szero>
 790:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_nan>

00000794 <__divsf3x>:
 794:	0e 94 c3 04 	call	0x986	; 0x986 <__fp_split3>
 798:	68 f3       	brcs	.-38     	; 0x774 <__divsf3+0x8>

0000079a <__divsf3_pse>:
 79a:	99 23       	and	r25, r25
 79c:	b1 f3       	breq	.-20     	; 0x78a <__divsf3+0x1e>
 79e:	55 23       	and	r21, r21
 7a0:	91 f3       	breq	.-28     	; 0x786 <__divsf3+0x1a>
 7a2:	95 1b       	sub	r25, r21
 7a4:	55 0b       	sbc	r21, r21
 7a6:	bb 27       	eor	r27, r27
 7a8:	aa 27       	eor	r26, r26
 7aa:	62 17       	cp	r22, r18
 7ac:	73 07       	cpc	r23, r19
 7ae:	84 07       	cpc	r24, r20
 7b0:	38 f0       	brcs	.+14     	; 0x7c0 <__divsf3_pse+0x26>
 7b2:	9f 5f       	subi	r25, 0xFF	; 255
 7b4:	5f 4f       	sbci	r21, 0xFF	; 255
 7b6:	22 0f       	add	r18, r18
 7b8:	33 1f       	adc	r19, r19
 7ba:	44 1f       	adc	r20, r20
 7bc:	aa 1f       	adc	r26, r26
 7be:	a9 f3       	breq	.-22     	; 0x7aa <__divsf3_pse+0x10>
 7c0:	35 d0       	rcall	.+106    	; 0x82c <__divsf3_pse+0x92>
 7c2:	0e 2e       	mov	r0, r30
 7c4:	3a f0       	brmi	.+14     	; 0x7d4 <__divsf3_pse+0x3a>
 7c6:	e0 e8       	ldi	r30, 0x80	; 128
 7c8:	32 d0       	rcall	.+100    	; 0x82e <__divsf3_pse+0x94>
 7ca:	91 50       	subi	r25, 0x01	; 1
 7cc:	50 40       	sbci	r21, 0x00	; 0
 7ce:	e6 95       	lsr	r30
 7d0:	00 1c       	adc	r0, r0
 7d2:	ca f7       	brpl	.-14     	; 0x7c6 <__divsf3_pse+0x2c>
 7d4:	2b d0       	rcall	.+86     	; 0x82c <__divsf3_pse+0x92>
 7d6:	fe 2f       	mov	r31, r30
 7d8:	29 d0       	rcall	.+82     	; 0x82c <__divsf3_pse+0x92>
 7da:	66 0f       	add	r22, r22
 7dc:	77 1f       	adc	r23, r23
 7de:	88 1f       	adc	r24, r24
 7e0:	bb 1f       	adc	r27, r27
 7e2:	26 17       	cp	r18, r22
 7e4:	37 07       	cpc	r19, r23
 7e6:	48 07       	cpc	r20, r24
 7e8:	ab 07       	cpc	r26, r27
 7ea:	b0 e8       	ldi	r27, 0x80	; 128
 7ec:	09 f0       	breq	.+2      	; 0x7f0 <__divsf3_pse+0x56>
 7ee:	bb 0b       	sbc	r27, r27
 7f0:	80 2d       	mov	r24, r0
 7f2:	bf 01       	movw	r22, r30
 7f4:	ff 27       	eor	r31, r31
 7f6:	93 58       	subi	r25, 0x83	; 131
 7f8:	5f 4f       	sbci	r21, 0xFF	; 255
 7fa:	3a f0       	brmi	.+14     	; 0x80a <__divsf3_pse+0x70>
 7fc:	9e 3f       	cpi	r25, 0xFE	; 254
 7fe:	51 05       	cpc	r21, r1
 800:	78 f0       	brcs	.+30     	; 0x820 <__divsf3_pse+0x86>
 802:	0c 94 9b 04 	jmp	0x936	; 0x936 <__fp_inf>
 806:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_szero>
 80a:	5f 3f       	cpi	r21, 0xFF	; 255
 80c:	e4 f3       	brlt	.-8      	; 0x806 <__divsf3_pse+0x6c>
 80e:	98 3e       	cpi	r25, 0xE8	; 232
 810:	d4 f3       	brlt	.-12     	; 0x806 <__divsf3_pse+0x6c>
 812:	86 95       	lsr	r24
 814:	77 95       	ror	r23
 816:	67 95       	ror	r22
 818:	b7 95       	ror	r27
 81a:	f7 95       	ror	r31
 81c:	9f 5f       	subi	r25, 0xFF	; 255
 81e:	c9 f7       	brne	.-14     	; 0x812 <__divsf3_pse+0x78>
 820:	88 0f       	add	r24, r24
 822:	91 1d       	adc	r25, r1
 824:	96 95       	lsr	r25
 826:	87 95       	ror	r24
 828:	97 f9       	bld	r25, 7
 82a:	08 95       	ret
 82c:	e1 e0       	ldi	r30, 0x01	; 1
 82e:	66 0f       	add	r22, r22
 830:	77 1f       	adc	r23, r23
 832:	88 1f       	adc	r24, r24
 834:	bb 1f       	adc	r27, r27
 836:	62 17       	cp	r22, r18
 838:	73 07       	cpc	r23, r19
 83a:	84 07       	cpc	r24, r20
 83c:	ba 07       	cpc	r27, r26
 83e:	20 f0       	brcs	.+8      	; 0x848 <__divsf3_pse+0xae>
 840:	62 1b       	sub	r22, r18
 842:	73 0b       	sbc	r23, r19
 844:	84 0b       	sbc	r24, r20
 846:	ba 0b       	sbc	r27, r26
 848:	ee 1f       	adc	r30, r30
 84a:	88 f7       	brcc	.-30     	; 0x82e <__divsf3_pse+0x94>
 84c:	e0 95       	com	r30
 84e:	08 95       	ret

00000850 <__fixsfsi>:
 850:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixunssfsi>
 854:	68 94       	set
 856:	b1 11       	cpse	r27, r1
 858:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_szero>
 85c:	08 95       	ret

0000085e <__fixunssfsi>:
 85e:	0e 94 cb 04 	call	0x996	; 0x996 <__fp_splitA>
 862:	88 f0       	brcs	.+34     	; 0x886 <__fixunssfsi+0x28>
 864:	9f 57       	subi	r25, 0x7F	; 127
 866:	98 f0       	brcs	.+38     	; 0x88e <__fixunssfsi+0x30>
 868:	b9 2f       	mov	r27, r25
 86a:	99 27       	eor	r25, r25
 86c:	b7 51       	subi	r27, 0x17	; 23
 86e:	b0 f0       	brcs	.+44     	; 0x89c <__fixunssfsi+0x3e>
 870:	e1 f0       	breq	.+56     	; 0x8aa <__fixunssfsi+0x4c>
 872:	66 0f       	add	r22, r22
 874:	77 1f       	adc	r23, r23
 876:	88 1f       	adc	r24, r24
 878:	99 1f       	adc	r25, r25
 87a:	1a f0       	brmi	.+6      	; 0x882 <__fixunssfsi+0x24>
 87c:	ba 95       	dec	r27
 87e:	c9 f7       	brne	.-14     	; 0x872 <__fixunssfsi+0x14>
 880:	14 c0       	rjmp	.+40     	; 0x8aa <__fixunssfsi+0x4c>
 882:	b1 30       	cpi	r27, 0x01	; 1
 884:	91 f0       	breq	.+36     	; 0x8aa <__fixunssfsi+0x4c>
 886:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__fp_zero>
 88a:	b1 e0       	ldi	r27, 0x01	; 1
 88c:	08 95       	ret
 88e:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__fp_zero>
 892:	67 2f       	mov	r22, r23
 894:	78 2f       	mov	r23, r24
 896:	88 27       	eor	r24, r24
 898:	b8 5f       	subi	r27, 0xF8	; 248
 89a:	39 f0       	breq	.+14     	; 0x8aa <__fixunssfsi+0x4c>
 89c:	b9 3f       	cpi	r27, 0xF9	; 249
 89e:	cc f3       	brlt	.-14     	; 0x892 <__fixunssfsi+0x34>
 8a0:	86 95       	lsr	r24
 8a2:	77 95       	ror	r23
 8a4:	67 95       	ror	r22
 8a6:	b3 95       	inc	r27
 8a8:	d9 f7       	brne	.-10     	; 0x8a0 <__fixunssfsi+0x42>
 8aa:	3e f4       	brtc	.+14     	; 0x8ba <__fixunssfsi+0x5c>
 8ac:	90 95       	com	r25
 8ae:	80 95       	com	r24
 8b0:	70 95       	com	r23
 8b2:	61 95       	neg	r22
 8b4:	7f 4f       	sbci	r23, 0xFF	; 255
 8b6:	8f 4f       	sbci	r24, 0xFF	; 255
 8b8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ba:	08 95       	ret

000008bc <__floatunsisf>:
 8bc:	e8 94       	clt
 8be:	09 c0       	rjmp	.+18     	; 0x8d2 <__floatsisf+0x12>

000008c0 <__floatsisf>:
 8c0:	97 fb       	bst	r25, 7
 8c2:	3e f4       	brtc	.+14     	; 0x8d2 <__floatsisf+0x12>
 8c4:	90 95       	com	r25
 8c6:	80 95       	com	r24
 8c8:	70 95       	com	r23
 8ca:	61 95       	neg	r22
 8cc:	7f 4f       	sbci	r23, 0xFF	; 255
 8ce:	8f 4f       	sbci	r24, 0xFF	; 255
 8d0:	9f 4f       	sbci	r25, 0xFF	; 255
 8d2:	99 23       	and	r25, r25
 8d4:	a9 f0       	breq	.+42     	; 0x900 <__floatsisf+0x40>
 8d6:	f9 2f       	mov	r31, r25
 8d8:	96 e9       	ldi	r25, 0x96	; 150
 8da:	bb 27       	eor	r27, r27
 8dc:	93 95       	inc	r25
 8de:	f6 95       	lsr	r31
 8e0:	87 95       	ror	r24
 8e2:	77 95       	ror	r23
 8e4:	67 95       	ror	r22
 8e6:	b7 95       	ror	r27
 8e8:	f1 11       	cpse	r31, r1
 8ea:	f8 cf       	rjmp	.-16     	; 0x8dc <__floatsisf+0x1c>
 8ec:	fa f4       	brpl	.+62     	; 0x92c <__floatsisf+0x6c>
 8ee:	bb 0f       	add	r27, r27
 8f0:	11 f4       	brne	.+4      	; 0x8f6 <__floatsisf+0x36>
 8f2:	60 ff       	sbrs	r22, 0
 8f4:	1b c0       	rjmp	.+54     	; 0x92c <__floatsisf+0x6c>
 8f6:	6f 5f       	subi	r22, 0xFF	; 255
 8f8:	7f 4f       	sbci	r23, 0xFF	; 255
 8fa:	8f 4f       	sbci	r24, 0xFF	; 255
 8fc:	9f 4f       	sbci	r25, 0xFF	; 255
 8fe:	16 c0       	rjmp	.+44     	; 0x92c <__floatsisf+0x6c>
 900:	88 23       	and	r24, r24
 902:	11 f0       	breq	.+4      	; 0x908 <__floatsisf+0x48>
 904:	96 e9       	ldi	r25, 0x96	; 150
 906:	11 c0       	rjmp	.+34     	; 0x92a <__floatsisf+0x6a>
 908:	77 23       	and	r23, r23
 90a:	21 f0       	breq	.+8      	; 0x914 <__floatsisf+0x54>
 90c:	9e e8       	ldi	r25, 0x8E	; 142
 90e:	87 2f       	mov	r24, r23
 910:	76 2f       	mov	r23, r22
 912:	05 c0       	rjmp	.+10     	; 0x91e <__floatsisf+0x5e>
 914:	66 23       	and	r22, r22
 916:	71 f0       	breq	.+28     	; 0x934 <__floatsisf+0x74>
 918:	96 e8       	ldi	r25, 0x86	; 134
 91a:	86 2f       	mov	r24, r22
 91c:	70 e0       	ldi	r23, 0x00	; 0
 91e:	60 e0       	ldi	r22, 0x00	; 0
 920:	2a f0       	brmi	.+10     	; 0x92c <__floatsisf+0x6c>
 922:	9a 95       	dec	r25
 924:	66 0f       	add	r22, r22
 926:	77 1f       	adc	r23, r23
 928:	88 1f       	adc	r24, r24
 92a:	da f7       	brpl	.-10     	; 0x922 <__floatsisf+0x62>
 92c:	88 0f       	add	r24, r24
 92e:	96 95       	lsr	r25
 930:	87 95       	ror	r24
 932:	97 f9       	bld	r25, 7
 934:	08 95       	ret

00000936 <__fp_inf>:
 936:	97 f9       	bld	r25, 7
 938:	9f 67       	ori	r25, 0x7F	; 127
 93a:	80 e8       	ldi	r24, 0x80	; 128
 93c:	70 e0       	ldi	r23, 0x00	; 0
 93e:	60 e0       	ldi	r22, 0x00	; 0
 940:	08 95       	ret

00000942 <__fp_nan>:
 942:	9f ef       	ldi	r25, 0xFF	; 255
 944:	80 ec       	ldi	r24, 0xC0	; 192
 946:	08 95       	ret

00000948 <__fp_pscA>:
 948:	00 24       	eor	r0, r0
 94a:	0a 94       	dec	r0
 94c:	16 16       	cp	r1, r22
 94e:	17 06       	cpc	r1, r23
 950:	18 06       	cpc	r1, r24
 952:	09 06       	cpc	r0, r25
 954:	08 95       	ret

00000956 <__fp_pscB>:
 956:	00 24       	eor	r0, r0
 958:	0a 94       	dec	r0
 95a:	12 16       	cp	r1, r18
 95c:	13 06       	cpc	r1, r19
 95e:	14 06       	cpc	r1, r20
 960:	05 06       	cpc	r0, r21
 962:	08 95       	ret

00000964 <__fp_round>:
 964:	09 2e       	mov	r0, r25
 966:	03 94       	inc	r0
 968:	00 0c       	add	r0, r0
 96a:	11 f4       	brne	.+4      	; 0x970 <__fp_round+0xc>
 96c:	88 23       	and	r24, r24
 96e:	52 f0       	brmi	.+20     	; 0x984 <__fp_round+0x20>
 970:	bb 0f       	add	r27, r27
 972:	40 f4       	brcc	.+16     	; 0x984 <__fp_round+0x20>
 974:	bf 2b       	or	r27, r31
 976:	11 f4       	brne	.+4      	; 0x97c <__fp_round+0x18>
 978:	60 ff       	sbrs	r22, 0
 97a:	04 c0       	rjmp	.+8      	; 0x984 <__fp_round+0x20>
 97c:	6f 5f       	subi	r22, 0xFF	; 255
 97e:	7f 4f       	sbci	r23, 0xFF	; 255
 980:	8f 4f       	sbci	r24, 0xFF	; 255
 982:	9f 4f       	sbci	r25, 0xFF	; 255
 984:	08 95       	ret

00000986 <__fp_split3>:
 986:	57 fd       	sbrc	r21, 7
 988:	90 58       	subi	r25, 0x80	; 128
 98a:	44 0f       	add	r20, r20
 98c:	55 1f       	adc	r21, r21
 98e:	59 f0       	breq	.+22     	; 0x9a6 <__fp_splitA+0x10>
 990:	5f 3f       	cpi	r21, 0xFF	; 255
 992:	71 f0       	breq	.+28     	; 0x9b0 <__fp_splitA+0x1a>
 994:	47 95       	ror	r20

00000996 <__fp_splitA>:
 996:	88 0f       	add	r24, r24
 998:	97 fb       	bst	r25, 7
 99a:	99 1f       	adc	r25, r25
 99c:	61 f0       	breq	.+24     	; 0x9b6 <__fp_splitA+0x20>
 99e:	9f 3f       	cpi	r25, 0xFF	; 255
 9a0:	79 f0       	breq	.+30     	; 0x9c0 <__fp_splitA+0x2a>
 9a2:	87 95       	ror	r24
 9a4:	08 95       	ret
 9a6:	12 16       	cp	r1, r18
 9a8:	13 06       	cpc	r1, r19
 9aa:	14 06       	cpc	r1, r20
 9ac:	55 1f       	adc	r21, r21
 9ae:	f2 cf       	rjmp	.-28     	; 0x994 <__fp_split3+0xe>
 9b0:	46 95       	lsr	r20
 9b2:	f1 df       	rcall	.-30     	; 0x996 <__fp_splitA>
 9b4:	08 c0       	rjmp	.+16     	; 0x9c6 <__fp_splitA+0x30>
 9b6:	16 16       	cp	r1, r22
 9b8:	17 06       	cpc	r1, r23
 9ba:	18 06       	cpc	r1, r24
 9bc:	99 1f       	adc	r25, r25
 9be:	f1 cf       	rjmp	.-30     	; 0x9a2 <__fp_splitA+0xc>
 9c0:	86 95       	lsr	r24
 9c2:	71 05       	cpc	r23, r1
 9c4:	61 05       	cpc	r22, r1
 9c6:	08 94       	sec
 9c8:	08 95       	ret

000009ca <__fp_zero>:
 9ca:	e8 94       	clt

000009cc <__fp_szero>:
 9cc:	bb 27       	eor	r27, r27
 9ce:	66 27       	eor	r22, r22
 9d0:	77 27       	eor	r23, r23
 9d2:	cb 01       	movw	r24, r22
 9d4:	97 f9       	bld	r25, 7
 9d6:	08 95       	ret

000009d8 <pow>:
 9d8:	fa 01       	movw	r30, r20
 9da:	ee 0f       	add	r30, r30
 9dc:	ff 1f       	adc	r31, r31
 9de:	30 96       	adiw	r30, 0x00	; 0
 9e0:	21 05       	cpc	r18, r1
 9e2:	31 05       	cpc	r19, r1
 9e4:	a1 f1       	breq	.+104    	; 0xa4e <pow+0x76>
 9e6:	61 15       	cp	r22, r1
 9e8:	71 05       	cpc	r23, r1
 9ea:	61 f4       	brne	.+24     	; 0xa04 <pow+0x2c>
 9ec:	80 38       	cpi	r24, 0x80	; 128
 9ee:	bf e3       	ldi	r27, 0x3F	; 63
 9f0:	9b 07       	cpc	r25, r27
 9f2:	49 f1       	breq	.+82     	; 0xa46 <pow+0x6e>
 9f4:	68 94       	set
 9f6:	90 38       	cpi	r25, 0x80	; 128
 9f8:	81 05       	cpc	r24, r1
 9fa:	61 f0       	breq	.+24     	; 0xa14 <pow+0x3c>
 9fc:	80 38       	cpi	r24, 0x80	; 128
 9fe:	bf ef       	ldi	r27, 0xFF	; 255
 a00:	9b 07       	cpc	r25, r27
 a02:	41 f0       	breq	.+16     	; 0xa14 <pow+0x3c>
 a04:	99 23       	and	r25, r25
 a06:	4a f5       	brpl	.+82     	; 0xa5a <pow+0x82>
 a08:	ff 3f       	cpi	r31, 0xFF	; 255
 a0a:	e1 05       	cpc	r30, r1
 a0c:	31 05       	cpc	r19, r1
 a0e:	21 05       	cpc	r18, r1
 a10:	19 f1       	breq	.+70     	; 0xa58 <pow+0x80>
 a12:	e8 94       	clt
 a14:	08 94       	sec
 a16:	e7 95       	ror	r30
 a18:	d9 01       	movw	r26, r18
 a1a:	aa 23       	and	r26, r26
 a1c:	29 f4       	brne	.+10     	; 0xa28 <pow+0x50>
 a1e:	ab 2f       	mov	r26, r27
 a20:	be 2f       	mov	r27, r30
 a22:	f8 5f       	subi	r31, 0xF8	; 248
 a24:	d0 f3       	brcs	.-12     	; 0xa1a <pow+0x42>
 a26:	10 c0       	rjmp	.+32     	; 0xa48 <pow+0x70>
 a28:	ff 5f       	subi	r31, 0xFF	; 255
 a2a:	70 f4       	brcc	.+28     	; 0xa48 <pow+0x70>
 a2c:	a6 95       	lsr	r26
 a2e:	e0 f7       	brcc	.-8      	; 0xa28 <pow+0x50>
 a30:	f7 39       	cpi	r31, 0x97	; 151
 a32:	50 f0       	brcs	.+20     	; 0xa48 <pow+0x70>
 a34:	19 f0       	breq	.+6      	; 0xa3c <pow+0x64>
 a36:	ff 3a       	cpi	r31, 0xAF	; 175
 a38:	38 f4       	brcc	.+14     	; 0xa48 <pow+0x70>
 a3a:	9f 77       	andi	r25, 0x7F	; 127
 a3c:	9f 93       	push	r25
 a3e:	0d d0       	rcall	.+26     	; 0xa5a <pow+0x82>
 a40:	0f 90       	pop	r0
 a42:	07 fc       	sbrc	r0, 7
 a44:	90 58       	subi	r25, 0x80	; 128
 a46:	08 95       	ret
 a48:	46 f0       	brts	.+16     	; 0xa5a <pow+0x82>
 a4a:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_nan>
 a4e:	60 e0       	ldi	r22, 0x00	; 0
 a50:	70 e0       	ldi	r23, 0x00	; 0
 a52:	80 e8       	ldi	r24, 0x80	; 128
 a54:	9f e3       	ldi	r25, 0x3F	; 63
 a56:	08 95       	ret
 a58:	4f e7       	ldi	r20, 0x7F	; 127
 a5a:	9f 77       	andi	r25, 0x7F	; 127
 a5c:	5f 93       	push	r21
 a5e:	4f 93       	push	r20
 a60:	3f 93       	push	r19
 a62:	2f 93       	push	r18
 a64:	0e 94 e7 05 	call	0xbce	; 0xbce <log>
 a68:	2f 91       	pop	r18
 a6a:	3f 91       	pop	r19
 a6c:	4f 91       	pop	r20
 a6e:	5f 91       	pop	r21
 a70:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__mulsf3>
 a74:	0c 94 44 05 	jmp	0xa88	; 0xa88 <exp>
 a78:	29 f4       	brne	.+10     	; 0xa84 <pow+0xac>
 a7a:	16 f0       	brts	.+4      	; 0xa80 <pow+0xa8>
 a7c:	0c 94 9b 04 	jmp	0x936	; 0x936 <__fp_inf>
 a80:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__fp_zero>
 a84:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_nan>

00000a88 <exp>:
 a88:	0e 94 cb 04 	call	0x996	; 0x996 <__fp_splitA>
 a8c:	a8 f3       	brcs	.-22     	; 0xa78 <pow+0xa0>
 a8e:	96 38       	cpi	r25, 0x86	; 134
 a90:	a0 f7       	brcc	.-24     	; 0xa7a <pow+0xa2>
 a92:	07 f8       	bld	r0, 7
 a94:	0f 92       	push	r0
 a96:	e8 94       	clt
 a98:	2b e3       	ldi	r18, 0x3B	; 59
 a9a:	3a ea       	ldi	r19, 0xAA	; 170
 a9c:	48 eb       	ldi	r20, 0xB8	; 184
 a9e:	5f e7       	ldi	r21, 0x7F	; 127
 aa0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__mulsf3_pse>
 aa4:	0f 92       	push	r0
 aa6:	0f 92       	push	r0
 aa8:	0f 92       	push	r0
 aaa:	4d b7       	in	r20, 0x3d	; 61
 aac:	5e b7       	in	r21, 0x3e	; 62
 aae:	0f 92       	push	r0
 ab0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <modf>
 ab4:	ec ef       	ldi	r30, 0xFC	; 252
 ab6:	f1 e0       	ldi	r31, 0x01	; 1
 ab8:	0e 94 76 05 	call	0xaec	; 0xaec <__fp_powser>
 abc:	4f 91       	pop	r20
 abe:	5f 91       	pop	r21
 ac0:	ef 91       	pop	r30
 ac2:	ff 91       	pop	r31
 ac4:	e5 95       	asr	r30
 ac6:	ee 1f       	adc	r30, r30
 ac8:	ff 1f       	adc	r31, r31
 aca:	49 f0       	breq	.+18     	; 0xade <exp+0x56>
 acc:	fe 57       	subi	r31, 0x7E	; 126
 ace:	e0 68       	ori	r30, 0x80	; 128
 ad0:	44 27       	eor	r20, r20
 ad2:	ee 0f       	add	r30, r30
 ad4:	44 1f       	adc	r20, r20
 ad6:	fa 95       	dec	r31
 ad8:	e1 f7       	brne	.-8      	; 0xad2 <exp+0x4a>
 ada:	41 95       	neg	r20
 adc:	55 0b       	sbc	r21, r21
 ade:	0e 94 a9 05 	call	0xb52	; 0xb52 <ldexp>
 ae2:	0f 90       	pop	r0
 ae4:	07 fe       	sbrs	r0, 7
 ae6:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <inverse>
 aea:	08 95       	ret

00000aec <__fp_powser>:
 aec:	df 93       	push	r29
 aee:	cf 93       	push	r28
 af0:	1f 93       	push	r17
 af2:	0f 93       	push	r16
 af4:	ff 92       	push	r15
 af6:	ef 92       	push	r14
 af8:	df 92       	push	r13
 afa:	7b 01       	movw	r14, r22
 afc:	8c 01       	movw	r16, r24
 afe:	68 94       	set
 b00:	06 c0       	rjmp	.+12     	; 0xb0e <__fp_powser+0x22>
 b02:	da 2e       	mov	r13, r26
 b04:	ef 01       	movw	r28, r30
 b06:	0e 94 76 06 	call	0xcec	; 0xcec <__mulsf3x>
 b0a:	fe 01       	movw	r30, r28
 b0c:	e8 94       	clt
 b0e:	a5 91       	lpm	r26, Z+
 b10:	25 91       	lpm	r18, Z+
 b12:	35 91       	lpm	r19, Z+
 b14:	45 91       	lpm	r20, Z+
 b16:	55 91       	lpm	r21, Z+
 b18:	a6 f3       	brts	.-24     	; 0xb02 <__fp_powser+0x16>
 b1a:	ef 01       	movw	r28, r30
 b1c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__addsf3x>
 b20:	fe 01       	movw	r30, r28
 b22:	97 01       	movw	r18, r14
 b24:	a8 01       	movw	r20, r16
 b26:	da 94       	dec	r13
 b28:	69 f7       	brne	.-38     	; 0xb04 <__fp_powser+0x18>
 b2a:	df 90       	pop	r13
 b2c:	ef 90       	pop	r14
 b2e:	ff 90       	pop	r15
 b30:	0f 91       	pop	r16
 b32:	1f 91       	pop	r17
 b34:	cf 91       	pop	r28
 b36:	df 91       	pop	r29
 b38:	08 95       	ret

00000b3a <inverse>:
 b3a:	9b 01       	movw	r18, r22
 b3c:	ac 01       	movw	r20, r24
 b3e:	60 e0       	ldi	r22, 0x00	; 0
 b40:	70 e0       	ldi	r23, 0x00	; 0
 b42:	80 e8       	ldi	r24, 0x80	; 128
 b44:	9f e3       	ldi	r25, 0x3F	; 63
 b46:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__divsf3>
 b4a:	0c 94 9b 04 	jmp	0x936	; 0x936 <__fp_inf>
 b4e:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_mpack>

00000b52 <ldexp>:
 b52:	0e 94 cb 04 	call	0x996	; 0x996 <__fp_splitA>
 b56:	d8 f3       	brcs	.-10     	; 0xb4e <inverse+0x14>
 b58:	99 23       	and	r25, r25
 b5a:	c9 f3       	breq	.-14     	; 0xb4e <inverse+0x14>
 b5c:	94 0f       	add	r25, r20
 b5e:	51 1d       	adc	r21, r1
 b60:	a3 f3       	brvs	.-24     	; 0xb4a <inverse+0x10>
 b62:	91 50       	subi	r25, 0x01	; 1
 b64:	50 40       	sbci	r21, 0x00	; 0
 b66:	94 f0       	brlt	.+36     	; 0xb8c <ldexp+0x3a>
 b68:	59 f0       	breq	.+22     	; 0xb80 <ldexp+0x2e>
 b6a:	88 23       	and	r24, r24
 b6c:	32 f0       	brmi	.+12     	; 0xb7a <ldexp+0x28>
 b6e:	66 0f       	add	r22, r22
 b70:	77 1f       	adc	r23, r23
 b72:	88 1f       	adc	r24, r24
 b74:	91 50       	subi	r25, 0x01	; 1
 b76:	50 40       	sbci	r21, 0x00	; 0
 b78:	c1 f7       	brne	.-16     	; 0xb6a <ldexp+0x18>
 b7a:	9e 3f       	cpi	r25, 0xFE	; 254
 b7c:	51 05       	cpc	r21, r1
 b7e:	2c f7       	brge	.-54     	; 0xb4a <inverse+0x10>
 b80:	88 0f       	add	r24, r24
 b82:	91 1d       	adc	r25, r1
 b84:	96 95       	lsr	r25
 b86:	87 95       	ror	r24
 b88:	97 f9       	bld	r25, 7
 b8a:	08 95       	ret
 b8c:	5f 3f       	cpi	r21, 0xFF	; 255
 b8e:	ac f0       	brlt	.+42     	; 0xbba <ldexp+0x68>
 b90:	98 3e       	cpi	r25, 0xE8	; 232
 b92:	9c f0       	brlt	.+38     	; 0xbba <ldexp+0x68>
 b94:	bb 27       	eor	r27, r27
 b96:	86 95       	lsr	r24
 b98:	77 95       	ror	r23
 b9a:	67 95       	ror	r22
 b9c:	b7 95       	ror	r27
 b9e:	08 f4       	brcc	.+2      	; 0xba2 <ldexp+0x50>
 ba0:	b1 60       	ori	r27, 0x01	; 1
 ba2:	93 95       	inc	r25
 ba4:	c1 f7       	brne	.-16     	; 0xb96 <ldexp+0x44>
 ba6:	bb 0f       	add	r27, r27
 ba8:	58 f7       	brcc	.-42     	; 0xb80 <ldexp+0x2e>
 baa:	11 f4       	brne	.+4      	; 0xbb0 <ldexp+0x5e>
 bac:	60 ff       	sbrs	r22, 0
 bae:	e8 cf       	rjmp	.-48     	; 0xb80 <ldexp+0x2e>
 bb0:	6f 5f       	subi	r22, 0xFF	; 255
 bb2:	7f 4f       	sbci	r23, 0xFF	; 255
 bb4:	8f 4f       	sbci	r24, 0xFF	; 255
 bb6:	9f 4f       	sbci	r25, 0xFF	; 255
 bb8:	e3 cf       	rjmp	.-58     	; 0xb80 <ldexp+0x2e>
 bba:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_szero>
 bbe:	16 f0       	brts	.+4      	; 0xbc4 <ldexp+0x72>
 bc0:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_mpack>
 bc4:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_nan>
 bc8:	68 94       	set
 bca:	0c 94 9b 04 	jmp	0x936	; 0x936 <__fp_inf>

00000bce <log>:
 bce:	0e 94 cb 04 	call	0x996	; 0x996 <__fp_splitA>
 bd2:	a8 f3       	brcs	.-22     	; 0xbbe <ldexp+0x6c>
 bd4:	99 23       	and	r25, r25
 bd6:	c1 f3       	breq	.-16     	; 0xbc8 <ldexp+0x76>
 bd8:	ae f3       	brts	.-22     	; 0xbc4 <ldexp+0x72>
 bda:	df 93       	push	r29
 bdc:	cf 93       	push	r28
 bde:	1f 93       	push	r17
 be0:	0f 93       	push	r16
 be2:	ff 92       	push	r15
 be4:	c9 2f       	mov	r28, r25
 be6:	dd 27       	eor	r29, r29
 be8:	88 23       	and	r24, r24
 bea:	2a f0       	brmi	.+10     	; 0xbf6 <log+0x28>
 bec:	21 97       	sbiw	r28, 0x01	; 1
 bee:	66 0f       	add	r22, r22
 bf0:	77 1f       	adc	r23, r23
 bf2:	88 1f       	adc	r24, r24
 bf4:	da f7       	brpl	.-10     	; 0xbec <log+0x1e>
 bf6:	20 e0       	ldi	r18, 0x00	; 0
 bf8:	30 e0       	ldi	r19, 0x00	; 0
 bfa:	40 e8       	ldi	r20, 0x80	; 128
 bfc:	5f eb       	ldi	r21, 0xBF	; 191
 bfe:	9f e3       	ldi	r25, 0x3F	; 63
 c00:	88 39       	cpi	r24, 0x98	; 152
 c02:	20 f0       	brcs	.+8      	; 0xc0c <log+0x3e>
 c04:	80 3e       	cpi	r24, 0xE0	; 224
 c06:	38 f0       	brcs	.+14     	; 0xc16 <log+0x48>
 c08:	21 96       	adiw	r28, 0x01	; 1
 c0a:	8f 77       	andi	r24, 0x7F	; 127
 c0c:	0e 94 4a 03 	call	0x694	; 0x694 <__addsf3>
 c10:	e4 e2       	ldi	r30, 0x24	; 36
 c12:	f2 e0       	ldi	r31, 0x02	; 2
 c14:	04 c0       	rjmp	.+8      	; 0xc1e <log+0x50>
 c16:	0e 94 4a 03 	call	0x694	; 0x694 <__addsf3>
 c1a:	e1 e5       	ldi	r30, 0x51	; 81
 c1c:	f2 e0       	ldi	r31, 0x02	; 2
 c1e:	0e 94 76 05 	call	0xaec	; 0xaec <__fp_powser>
 c22:	8b 01       	movw	r16, r22
 c24:	be 01       	movw	r22, r28
 c26:	ec 01       	movw	r28, r24
 c28:	fb 2e       	mov	r15, r27
 c2a:	6f 57       	subi	r22, 0x7F	; 127
 c2c:	71 09       	sbc	r23, r1
 c2e:	75 95       	asr	r23
 c30:	77 1f       	adc	r23, r23
 c32:	88 0b       	sbc	r24, r24
 c34:	99 0b       	sbc	r25, r25
 c36:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__floatsisf>
 c3a:	28 e1       	ldi	r18, 0x18	; 24
 c3c:	32 e7       	ldi	r19, 0x72	; 114
 c3e:	41 e3       	ldi	r20, 0x31	; 49
 c40:	5f e3       	ldi	r21, 0x3F	; 63
 c42:	0e 94 76 06 	call	0xcec	; 0xcec <__mulsf3x>
 c46:	af 2d       	mov	r26, r15
 c48:	98 01       	movw	r18, r16
 c4a:	ae 01       	movw	r20, r28
 c4c:	ff 90       	pop	r15
 c4e:	0f 91       	pop	r16
 c50:	1f 91       	pop	r17
 c52:	cf 91       	pop	r28
 c54:	df 91       	pop	r29
 c56:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__addsf3x>
 c5a:	0c 94 b2 04 	jmp	0x964	; 0x964 <__fp_round>

00000c5e <modf>:
 c5e:	fa 01       	movw	r30, r20
 c60:	dc 01       	movw	r26, r24
 c62:	aa 0f       	add	r26, r26
 c64:	bb 1f       	adc	r27, r27
 c66:	9b 01       	movw	r18, r22
 c68:	ac 01       	movw	r20, r24
 c6a:	bf 57       	subi	r27, 0x7F	; 127
 c6c:	28 f4       	brcc	.+10     	; 0xc78 <modf+0x1a>
 c6e:	22 27       	eor	r18, r18
 c70:	33 27       	eor	r19, r19
 c72:	44 27       	eor	r20, r20
 c74:	50 78       	andi	r21, 0x80	; 128
 c76:	20 c0       	rjmp	.+64     	; 0xcb8 <modf+0x5a>
 c78:	b7 51       	subi	r27, 0x17	; 23
 c7a:	90 f4       	brcc	.+36     	; 0xca0 <modf+0x42>
 c7c:	ab 2f       	mov	r26, r27
 c7e:	00 24       	eor	r0, r0
 c80:	46 95       	lsr	r20
 c82:	37 95       	ror	r19
 c84:	27 95       	ror	r18
 c86:	01 1c       	adc	r0, r1
 c88:	a3 95       	inc	r26
 c8a:	d2 f3       	brmi	.-12     	; 0xc80 <modf+0x22>
 c8c:	00 20       	and	r0, r0
 c8e:	71 f0       	breq	.+28     	; 0xcac <modf+0x4e>
 c90:	22 0f       	add	r18, r18
 c92:	33 1f       	adc	r19, r19
 c94:	44 1f       	adc	r20, r20
 c96:	b3 95       	inc	r27
 c98:	da f3       	brmi	.-10     	; 0xc90 <modf+0x32>
 c9a:	0e d0       	rcall	.+28     	; 0xcb8 <modf+0x5a>
 c9c:	0c 94 49 03 	jmp	0x692	; 0x692 <__subsf3>
 ca0:	61 30       	cpi	r22, 0x01	; 1
 ca2:	71 05       	cpc	r23, r1
 ca4:	a0 e8       	ldi	r26, 0x80	; 128
 ca6:	8a 07       	cpc	r24, r26
 ca8:	b9 46       	sbci	r27, 0x69	; 105
 caa:	30 f4       	brcc	.+12     	; 0xcb8 <modf+0x5a>
 cac:	9b 01       	movw	r18, r22
 cae:	ac 01       	movw	r20, r24
 cb0:	66 27       	eor	r22, r22
 cb2:	77 27       	eor	r23, r23
 cb4:	88 27       	eor	r24, r24
 cb6:	90 78       	andi	r25, 0x80	; 128
 cb8:	30 96       	adiw	r30, 0x00	; 0
 cba:	21 f0       	breq	.+8      	; 0xcc4 <modf+0x66>
 cbc:	20 83       	st	Z, r18
 cbe:	31 83       	std	Z+1, r19	; 0x01
 cc0:	42 83       	std	Z+2, r20	; 0x02
 cc2:	53 83       	std	Z+3, r21	; 0x03
 cc4:	08 95       	ret

00000cc6 <__mulsf3>:
 cc6:	0e 94 76 06 	call	0xcec	; 0xcec <__mulsf3x>
 cca:	0c 94 b2 04 	jmp	0x964	; 0x964 <__fp_round>
 cce:	0e 94 a4 04 	call	0x948	; 0x948 <__fp_pscA>
 cd2:	38 f0       	brcs	.+14     	; 0xce2 <__mulsf3+0x1c>
 cd4:	0e 94 ab 04 	call	0x956	; 0x956 <__fp_pscB>
 cd8:	20 f0       	brcs	.+8      	; 0xce2 <__mulsf3+0x1c>
 cda:	95 23       	and	r25, r21
 cdc:	11 f0       	breq	.+4      	; 0xce2 <__mulsf3+0x1c>
 cde:	0c 94 9b 04 	jmp	0x936	; 0x936 <__fp_inf>
 ce2:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_nan>
 ce6:	11 24       	eor	r1, r1
 ce8:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_szero>

00000cec <__mulsf3x>:
 cec:	0e 94 c3 04 	call	0x986	; 0x986 <__fp_split3>
 cf0:	70 f3       	brcs	.-36     	; 0xcce <__mulsf3+0x8>

00000cf2 <__mulsf3_pse>:
 cf2:	95 9f       	mul	r25, r21
 cf4:	c1 f3       	breq	.-16     	; 0xce6 <__mulsf3+0x20>
 cf6:	95 0f       	add	r25, r21
 cf8:	50 e0       	ldi	r21, 0x00	; 0
 cfa:	55 1f       	adc	r21, r21
 cfc:	62 9f       	mul	r22, r18
 cfe:	f0 01       	movw	r30, r0
 d00:	72 9f       	mul	r23, r18
 d02:	bb 27       	eor	r27, r27
 d04:	f0 0d       	add	r31, r0
 d06:	b1 1d       	adc	r27, r1
 d08:	63 9f       	mul	r22, r19
 d0a:	aa 27       	eor	r26, r26
 d0c:	f0 0d       	add	r31, r0
 d0e:	b1 1d       	adc	r27, r1
 d10:	aa 1f       	adc	r26, r26
 d12:	64 9f       	mul	r22, r20
 d14:	66 27       	eor	r22, r22
 d16:	b0 0d       	add	r27, r0
 d18:	a1 1d       	adc	r26, r1
 d1a:	66 1f       	adc	r22, r22
 d1c:	82 9f       	mul	r24, r18
 d1e:	22 27       	eor	r18, r18
 d20:	b0 0d       	add	r27, r0
 d22:	a1 1d       	adc	r26, r1
 d24:	62 1f       	adc	r22, r18
 d26:	73 9f       	mul	r23, r19
 d28:	b0 0d       	add	r27, r0
 d2a:	a1 1d       	adc	r26, r1
 d2c:	62 1f       	adc	r22, r18
 d2e:	83 9f       	mul	r24, r19
 d30:	a0 0d       	add	r26, r0
 d32:	61 1d       	adc	r22, r1
 d34:	22 1f       	adc	r18, r18
 d36:	74 9f       	mul	r23, r20
 d38:	33 27       	eor	r19, r19
 d3a:	a0 0d       	add	r26, r0
 d3c:	61 1d       	adc	r22, r1
 d3e:	23 1f       	adc	r18, r19
 d40:	84 9f       	mul	r24, r20
 d42:	60 0d       	add	r22, r0
 d44:	21 1d       	adc	r18, r1
 d46:	82 2f       	mov	r24, r18
 d48:	76 2f       	mov	r23, r22
 d4a:	6a 2f       	mov	r22, r26
 d4c:	11 24       	eor	r1, r1
 d4e:	9f 57       	subi	r25, 0x7F	; 127
 d50:	50 40       	sbci	r21, 0x00	; 0
 d52:	9a f0       	brmi	.+38     	; 0xd7a <__mulsf3_pse+0x88>
 d54:	f1 f0       	breq	.+60     	; 0xd92 <__mulsf3_pse+0xa0>
 d56:	88 23       	and	r24, r24
 d58:	4a f0       	brmi	.+18     	; 0xd6c <__mulsf3_pse+0x7a>
 d5a:	ee 0f       	add	r30, r30
 d5c:	ff 1f       	adc	r31, r31
 d5e:	bb 1f       	adc	r27, r27
 d60:	66 1f       	adc	r22, r22
 d62:	77 1f       	adc	r23, r23
 d64:	88 1f       	adc	r24, r24
 d66:	91 50       	subi	r25, 0x01	; 1
 d68:	50 40       	sbci	r21, 0x00	; 0
 d6a:	a9 f7       	brne	.-22     	; 0xd56 <__mulsf3_pse+0x64>
 d6c:	9e 3f       	cpi	r25, 0xFE	; 254
 d6e:	51 05       	cpc	r21, r1
 d70:	80 f0       	brcs	.+32     	; 0xd92 <__mulsf3_pse+0xa0>
 d72:	0c 94 9b 04 	jmp	0x936	; 0x936 <__fp_inf>
 d76:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_szero>
 d7a:	5f 3f       	cpi	r21, 0xFF	; 255
 d7c:	e4 f3       	brlt	.-8      	; 0xd76 <__mulsf3_pse+0x84>
 d7e:	98 3e       	cpi	r25, 0xE8	; 232
 d80:	d4 f3       	brlt	.-12     	; 0xd76 <__mulsf3_pse+0x84>
 d82:	86 95       	lsr	r24
 d84:	77 95       	ror	r23
 d86:	67 95       	ror	r22
 d88:	b7 95       	ror	r27
 d8a:	f7 95       	ror	r31
 d8c:	e7 95       	ror	r30
 d8e:	9f 5f       	subi	r25, 0xFF	; 255
 d90:	c1 f7       	brne	.-16     	; 0xd82 <__mulsf3_pse+0x90>
 d92:	fe 2b       	or	r31, r30
 d94:	88 0f       	add	r24, r24
 d96:	91 1d       	adc	r25, r1
 d98:	96 95       	lsr	r25
 d9a:	87 95       	ror	r24
 d9c:	97 f9       	bld	r25, 7
 d9e:	08 95       	ret

00000da0 <__fp_mpack>:
 da0:	9f 3f       	cpi	r25, 0xFF	; 255
 da2:	31 f0       	breq	.+12     	; 0xdb0 <__fp_mpack_finite+0xc>

00000da4 <__fp_mpack_finite>:
 da4:	91 50       	subi	r25, 0x01	; 1
 da6:	20 f4       	brcc	.+8      	; 0xdb0 <__fp_mpack_finite+0xc>
 da8:	87 95       	ror	r24
 daa:	77 95       	ror	r23
 dac:	67 95       	ror	r22
 dae:	b7 95       	ror	r27
 db0:	88 0f       	add	r24, r24
 db2:	91 1d       	adc	r25, r1
 db4:	96 95       	lsr	r25
 db6:	87 95       	ror	r24
 db8:	97 f9       	bld	r25, 7
 dba:	08 95       	ret

00000dbc <__divmodhi4>:
 dbc:	97 fb       	bst	r25, 7
 dbe:	07 2e       	mov	r0, r23
 dc0:	16 f4       	brtc	.+4      	; 0xdc6 <__divmodhi4+0xa>
 dc2:	00 94       	com	r0
 dc4:	07 d0       	rcall	.+14     	; 0xdd4 <__divmodhi4_neg1>
 dc6:	77 fd       	sbrc	r23, 7
 dc8:	09 d0       	rcall	.+18     	; 0xddc <__divmodhi4_neg2>
 dca:	0e 94 f2 06 	call	0xde4	; 0xde4 <__udivmodhi4>
 dce:	07 fc       	sbrc	r0, 7
 dd0:	05 d0       	rcall	.+10     	; 0xddc <__divmodhi4_neg2>
 dd2:	3e f4       	brtc	.+14     	; 0xde2 <__divmodhi4_exit>

00000dd4 <__divmodhi4_neg1>:
 dd4:	90 95       	com	r25
 dd6:	81 95       	neg	r24
 dd8:	9f 4f       	sbci	r25, 0xFF	; 255
 dda:	08 95       	ret

00000ddc <__divmodhi4_neg2>:
 ddc:	70 95       	com	r23
 dde:	61 95       	neg	r22
 de0:	7f 4f       	sbci	r23, 0xFF	; 255

00000de2 <__divmodhi4_exit>:
 de2:	08 95       	ret

00000de4 <__udivmodhi4>:
 de4:	aa 1b       	sub	r26, r26
 de6:	bb 1b       	sub	r27, r27
 de8:	51 e1       	ldi	r21, 0x11	; 17
 dea:	07 c0       	rjmp	.+14     	; 0xdfa <__udivmodhi4_ep>

00000dec <__udivmodhi4_loop>:
 dec:	aa 1f       	adc	r26, r26
 dee:	bb 1f       	adc	r27, r27
 df0:	a6 17       	cp	r26, r22
 df2:	b7 07       	cpc	r27, r23
 df4:	10 f0       	brcs	.+4      	; 0xdfa <__udivmodhi4_ep>
 df6:	a6 1b       	sub	r26, r22
 df8:	b7 0b       	sbc	r27, r23

00000dfa <__udivmodhi4_ep>:
 dfa:	88 1f       	adc	r24, r24
 dfc:	99 1f       	adc	r25, r25
 dfe:	5a 95       	dec	r21
 e00:	a9 f7       	brne	.-22     	; 0xdec <__udivmodhi4_loop>
 e02:	80 95       	com	r24
 e04:	90 95       	com	r25
 e06:	bc 01       	movw	r22, r24
 e08:	cd 01       	movw	r24, r26
 e0a:	08 95       	ret

00000e0c <_exit>:
 e0c:	f8 94       	cli

00000e0e <__stop_program>:
 e0e:	ff cf       	rjmp	.-2      	; 0xe0e <__stop_program>
